{"version":3,"sources":["actions.js","Components/InputForm.js","Components/Tasks.js","Components/TodoList.js","TodoBucketApp.js","serviceWorker.js","reducer.js","store.js","index.js"],"names":["TODO_ACTIONS","ADD_BUCKET","ADD_TASK","REMOVE_TASK","DONE_TASK","addBucket","name","type","addTask","value","bucketIndex","doneTask","taskIndex","removeTask","InputForm","onSubmit","event","preventDefault","newItemValue","refs","itemName","onValueChange","props","form","reset","this","focus","buttonText","ref","className","placeholder","React","Component","Tasks","items","markTodoDone","removeItem","itemsElement","map","item","i","todoClass","done","aria-hidden","onClick","TodoList","bucket","addItem","id","TodoBucketApp","bucketName","addBucketDispatch","setState","selectedBucketIndex","addTaskDispatch","removeTaskDispatch","doneTaskDispatch","bucketSelection","index","state","buckets","bucketElements","class","selectedBucketObject","todoListElement","key","connect","Boolean","window","location","hostname","match","localState","JSON","parse","localStorage","getItem","error","initialState","TodoReducer","action","changes","task","taskBucket","push","splice","Object","keys","length","setItem","stringify","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAAaA,EAAe,CACxBC,WAAY,aACZC,SAAU,WACVC,YAAa,cACbC,UAAW,aAGFC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,MAAe,CACpCC,KAAMP,EAAaC,WACnBK,SAGSE,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,MAA6B,CAChDH,KAAMP,EAAaE,SACnBO,QACAC,gBAGSC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWF,EAAd,EAAcA,YAAd,MAAiC,CACrDH,KAAMP,EAAaI,UACnBQ,YACAF,gBAGSG,EAAa,SAAC,GAAD,IAAGD,EAAH,EAAGA,UAAWF,EAAd,EAAcA,YAAd,MAAiC,CACvDH,KAAMP,EAAaG,YACnBS,YACAF,gBCzBG,IAAMI,EAAb,2MAKIC,SAAW,SAACC,GACRA,EAAMC,iBACN,IAAIC,EAAe,EAAKC,KAAKC,SAASX,MAElCS,KAEAG,EAD0B,EAAKC,MAAvBD,eACMH,GACd,EAAKC,KAAKI,KAAKC,UAZ3B,mFAEQC,KAAKN,KAAKC,SAASM,UAF3B,+BAgBc,IACEC,EAAeF,KAAKH,MAApBK,WAER,OAAQ,0BAAMC,IAAI,OAAOC,UAAU,+BAA+Bd,SAAUU,KAAKV,UAC7E,2BAAOR,KAAK,OAAOuB,YAAY,UAAUF,IAAI,WAAWC,UAAU,sBAClE,4BAAQtB,KAAK,SAASsB,UAAU,0BAA0BF,QArBtE,GAA+BI,IAAMC,WCA9B,SAASC,EAAT,GAKH,IAJAC,EAID,EAJCA,MACAxB,EAGD,EAHCA,YACAyB,EAED,EAFCA,aACAC,EACD,EADCA,WAEMC,EAAeH,EAAMI,KAAI,SAACC,EAAMC,GAClC,IAAIC,EAAYF,EAAKG,KACjB,OAAS,SAEb,OACI,wBAAIb,UAAU,oBACV,yBAAKA,UAAWY,GACZ,0BAAMZ,UAAU,8BAA8Bc,cAAY,OAAOC,QAAS,WACtET,EAAaK,EAAG9B,MAEnB6B,EAAK9B,MACN,4BAAQF,KAAK,SAASsB,UAAU,QAAQe,QAAS,WAC7CR,EAAWI,EAAG9B,KADlB,aAQhB,OACI,wBAAImB,UAAU,cAAd,IAA6BQ,EAA7B,KCvBD,SAASQ,EAAT,GAMH,IALAC,EAKD,EALCA,OACAC,EAID,EAJCA,QACAX,EAGD,EAHCA,WACAD,EAED,EAFCA,aACAzB,EACD,EADCA,YAGA,OAAQ,yBAAKsC,GAAG,eACZ,kBAAC,EAAD,CAAWrB,WAAW,cAAcN,cAAe0B,IACnD,kBAACd,EAAD,CACIC,MAAOY,EAAOZ,MACdE,WAAYA,EACZD,aAAcA,EACdzB,YAAaA,K,UCRZuC,EAAb,YACE,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAKRjB,UAAY,SAAC6C,GACNA,IAGL,EAAK5B,MAAM6B,kBAAkB,CAAE7C,KAAM4C,IACrC,EAAKE,SAAS,CAAEC,oBAAqB,MAXpB,EAcnBN,QAAU,SAACtC,EAAOC,GAChB,EAAKY,MAAMgC,gBAAgB,CAAE7C,QAAOC,iBAfnB,EAkBnB0B,WAAa,SAACxB,EAAWF,GACvB,EAAKY,MAAMiC,mBAAmB,CAAE3C,YAAWF,iBAnB1B,EAsBnByB,aAAe,SAACvB,EAAWF,GACzB,EAAKY,MAAMkC,iBAAiB,CAAE5C,YAAWF,iBAvBxB,EA0BnB+C,gBAAkB,SAACC,GACjB,EAAKN,SAAS,CACZC,oBAAqBK,KA1BvB,EAAKC,MAAQ,CACXN,oBAAqB,GAHN,EADrB,sEAiCY,IAAD,OACCO,EAAYnC,KAAKH,MAAjBsC,QAeFC,EAAkB,wBAAIC,MAAM,cAC/BF,EAAQtB,KAAI,SAACQ,EAAQN,GACpB,OAAO,wBAAII,QAAS,kBAAM,EAAKa,gBAAgBjB,IAAIX,UAAU,gCAAtD,IAAwFiB,EAAOxC,UAKpGyD,EAAuBtC,KAAKH,MAAMsC,QAAQnC,KAAKkC,MAAMN,qBAErDW,EAAkBD,EAAwB,kBAAClB,EAAD,CAC9CoB,IAAKF,EAAqBzD,KAAOmB,KAAKkC,MAAMN,oBAC5CP,OAAQiB,EACRhB,QAAS,SAACtC,GACR,EAAKsC,QAAQtC,EAAO,EAAKkD,MAAMN,sBAEjCjB,WAAYX,KAAKW,WACjBD,aAAcV,KAAKU,aACnBzB,YAAae,KAAKkC,MAAMN,sBACpB,KAEN,OAAQ,yBAAKS,MAAM,QACjB,yBAAKA,MAAM,QACT,yBAAKjC,UAAU,qBACb,kBAAC,EAAD,CAAWF,WAAW,gBAAgBN,cAAeI,KAAKpB,aAE5D,6BACGwD,IAGL,yBAAKC,MAAM,SACRE,QA/ET,GAAmCjC,IAAMC,WAgG1BkC,mBAVf,SAAyBP,EAAOrC,GAK9B,MAAO,CACLsC,QAHED,EADFC,WAQoC,CACtCT,kBAAmB9C,EACnBiD,gBAAiB9C,EACjBgD,iBAAkB7C,EAClB4C,mBAAoB1C,GAJPqD,CAKZjB,GCpGiBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mlBChBN,IAEIC,EAAa,GAEjB,IACIA,EAAaC,KAAKC,MAAMC,aAAaC,QALZ,YAM3B,MAAOC,IAIT,IAAMC,EAAeN,GAAc,CAC/BZ,QAAS,IAoEEmB,EAjEK,WAAwC,IAAvCpB,EAAsC,uDAA9BmB,EAAcE,EAAgB,uDAAP,GAE5CC,EAAU,GAEd,OAAQD,EAAOzE,MACX,KAAKP,EAAaC,WAAa,IACnB2D,EAAYD,EAAZC,QACRqB,EAAU,CACNrB,QAAQ,CAAE,CAAEtD,KAAM0E,EAAO1E,KAAM4B,MAAO,KAA/B,mBAAwC0B,KAEnD,MAEJ,KAAK5D,EAAaE,SAAW,IACjB0D,EAAYD,EAAZC,QACFsB,EAAO,CACTxC,MAAM,EACNjC,MAAOuE,EAAOvE,OAGZ0E,EAAU,KAAQvB,EAAQoB,EAAOtE,cACvCyE,EAAWjD,MAAMkD,KAAKF,GAEtBtB,EAAQoB,EAAOtE,aAAeyE,EAE9BF,EAAU,CACNrB,QAAQ,YAAKA,IAEjB,MAEJ,KAAK5D,EAAaG,YAAc,IACpByD,EAAYD,EAAZC,QACFuB,EAAavB,EAAQoB,EAAOtE,aAGlCyE,EAAWjD,MAAMmD,OAAOL,EAAOpE,UAAW,GAC1CqE,EAAU,CACNrB,QAAQ,YAAKA,IAEjB,MAEJ,KAAK5D,EAAaI,UAAY,IAClBwD,EAAYD,EAAZC,QACFuB,EAAavB,EAAQoB,EAAOtE,aAE5B6B,EAAO4C,EAAWjD,MAAM8C,EAAOpE,WACrC2B,EAAKG,MAAQH,EAAKG,KAElBuC,EAAU,CACNrB,QAAQ,YAAKA,IAEjB,MAEJ,QACI,OAAOD,EAGf,OAAI2B,OAAOC,KAAKN,GAASO,OAAS,GAC9Bb,aAAac,QAvEQ,UAuEsBhB,KAAKiB,UAAUT,GAAW,KAC9DA,GAGAtB,GCxEAgC,EAFDC,YAAYb,GCM1Bc,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEFI,SAASC,eAAe,SHoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.15c3076a.chunk.js","sourcesContent":["export const TODO_ACTIONS = {\n    ADD_BUCKET: 'ADD_BUCKET',\n    ADD_TASK: 'ADD_TASK',\n    REMOVE_TASK: 'REMOVE_TASK',\n    DONE_TASK: 'DONE_TASK',\n}\n\nexport const addBucket = ({ name }) => ({\n    type: TODO_ACTIONS.ADD_BUCKET,\n    name,\n})\n\nexport const addTask = ({ value, bucketIndex }) => ({\n    type: TODO_ACTIONS.ADD_TASK,\n    value,\n    bucketIndex,\n})\n\nexport const doneTask = ({ taskIndex, bucketIndex }) => ({\n    type: TODO_ACTIONS.DONE_TASK,\n    taskIndex,\n    bucketIndex,\n})\n\nexport const removeTask = ({ taskIndex, bucketIndex }) => ({\n    type: TODO_ACTIONS.REMOVE_TASK,\n    taskIndex,\n    bucketIndex,\n})\n\nexport default {\n    TODO_ACTIONS,\n    addBucket,\n    addTask,\n    doneTask,\n    removeTask,\n}","import React from 'react';\n\nexport class InputForm extends React.Component {\n    componentDidMount() {\n        this.refs.itemName.focus();\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        var newItemValue = this.refs.itemName.value;\n\n        if (newItemValue) {\n            const { onValueChange } = this.props;\n            onValueChange(newItemValue);\n            this.refs.form.reset();\n        }\n    }\n\n    render() {\n        const { buttonText } = this.props;\n\n        return (<form ref=\"form\" className=\"input-form input-form-inline\" onSubmit={this.onSubmit}>\n            <input type=\"text\" placeholder=\"type...\" ref=\"itemName\" className=\"form-control text\" />\n            <button type=\"submit\" className=\"btn btn-default submit\">{buttonText}</button>\n        </form>)\n    }\n}","import React from 'react';\n\nexport function Tasks({\n    items,\n    bucketIndex,\n    markTodoDone,\n    removeItem,\n}) {\n    const itemsElement = items.map((item, i) => {\n        var todoClass = item.done ?\n            \"done\" : \"undone\";\n\n        return (\n            <li className=\"list-group-item \">\n                <div className={todoClass}>\n                    <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={() => {\n                        markTodoDone(i, bucketIndex);\n                    }}></span>\n                    {item.value}\n                    <button type=\"button\" className=\"close\" onClick={() => {\n                        removeItem(i, bucketIndex);\n                    }}>&times;</button>\n                </div>\n            </li>\n        );\n    })\n\n    return (\n        <ul className=\"list-group\"> {itemsElement} </ul>\n    );\n}","import React from 'react';\nimport { TodoHeader } from './TodoHeader';\nimport { InputForm } from './InputForm';\nimport { Tasks } from './Tasks';\n\nexport function TodoList({\n    bucket,\n    addItem,\n    removeItem,\n    markTodoDone,\n    bucketIndex,\n}) {\n\n    return (<div id=\"todo-bucket\">\n        <InputForm buttonText='Create Task' onValueChange={addItem} />\n        <Tasks\n            items={bucket.items}\n            removeItem={removeItem}\n            markTodoDone={markTodoDone}\n            bucketIndex={bucketIndex}\n        />\n    </div>)\n}","import { connect } from 'react-redux';\nimport {\n  addBucket,\n  addTask,\n  doneTask,\n  removeTask,\n} from './actions'\nimport React from 'react';\nimport { TodoList } from './Components/TodoList';\nimport { InputForm } from './Components/InputForm';\nimport './TodoBucketApp.css'\nexport class TodoBucketApp extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedBucketIndex: 0\n    }\n  }\n  addBucket = (bucketName) => {\n    if (!bucketName) {\n      return;\n    }\n    this.props.addBucketDispatch({ name: bucketName })\n    this.setState({ selectedBucketIndex: 0 })\n  }\n\n  addItem = (value, bucketIndex) => {\n    this.props.addTaskDispatch({ value, bucketIndex })\n  }\n\n  removeItem = (taskIndex, bucketIndex) => {\n    this.props.removeTaskDispatch({ taskIndex, bucketIndex })\n  }\n\n  markTodoDone = (taskIndex, bucketIndex) => {\n    this.props.doneTaskDispatch({ taskIndex, bucketIndex })\n  }\n\n  bucketSelection = (index) => {\n    this.setState({\n      selectedBucketIndex: index\n    })\n  }\n\n  render() {\n    const { buckets } = this.props;\n\n    // const todoListElements = buckets.map((bucket, i) => {\n    //   return <TodoList\n    //     key={bucket.name + i}\n    //     bucket={bucket}\n    //     addItem={(value) => {\n    //       this.addItem(value, i)\n    //     }}\n    //     removeItem={this.removeItem}\n    //     markTodoDone={this.markTodoDone}\n    //     bucketIndex={i}\n    //   />\n    // });\n\n    const bucketElements = (<ul class=\"list-group\">\n      {buckets.map((bucket, i) => {\n        return <li onClick={() => this.bucketSelection(i)} className=\"list-group-item bucket-items\" > {bucket.name}</li>;\n      })\n      }\n    </ul >)\n\n    const selectedBucketObject = this.props.buckets[this.state.selectedBucketIndex]\n\n    const todoListElement = selectedBucketObject ? (<TodoList\n      key={selectedBucketObject.name + this.state.selectedBucketIndex}\n      bucket={selectedBucketObject}\n      addItem={(value) => {\n        this.addItem(value, this.state.selectedBucketIndex)\n      }}\n      removeItem={this.removeItem}\n      markTodoDone={this.markTodoDone}\n      bucketIndex={this.state.selectedBucketIndex}\n    />) : null;\n\n    return (<div class=\"main\">\n      <div class=\"left\">\n        <div className=\"input-form-inline\">\n          <InputForm buttonText='Create Bucket' onValueChange={this.addBucket} />\n        </div>\n        <div>\n          {bucketElements}\n        </div>\n      </div>\n      <div class=\"right\">\n        {todoListElement}\n      </div>\n    </div>)\n  }\n}\n\n\nfunction mapStateToProps(state, props) {\n  const {\n    buckets\n  } = state;\n\n  return {\n    buckets\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addBucketDispatch: addBucket,\n  addTaskDispatch: addTask,\n  doneTaskDispatch: doneTask,\n  removeTaskDispatch: removeTask,\n})(TodoBucketApp);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TODO_ACTIONS } from './actions';\n\nconst LOCAL_STORAGE_BUCKET = 'buckets'\n\nlet localState = [];\n\ntry {\n    localState = JSON.parse(localStorage.getItem(LOCAL_STORAGE_BUCKET))\n} catch (error) {\n\n}\n\nconst initialState = localState || {\n    buckets: []\n};\n\nconst TodoReducer = (state = initialState, action = {}) => {\n\n    let changes = {};\n\n    switch (action.type) {\n        case TODO_ACTIONS.ADD_BUCKET: {\n            const { buckets } = state;\n            changes = {\n                buckets: [{ name: action.name, items: [] }, ...buckets]\n            }\n            break;\n        }\n        case TODO_ACTIONS.ADD_TASK: {\n            const { buckets } = state;\n            const task = {\n                done: false,\n                value: action.value,\n            }\n\n            const taskBucket = { ...buckets[action.bucketIndex] }\n            taskBucket.items.push(task);\n\n            buckets[action.bucketIndex] = taskBucket;\n\n            changes = {\n                buckets: [...buckets]\n            }\n            break;\n        }\n        case TODO_ACTIONS.REMOVE_TASK: {\n            const { buckets } = state;\n            const taskBucket = buckets[action.bucketIndex]\n\n\n            taskBucket.items.splice(action.taskIndex, 1);\n            changes = {\n                buckets: [...buckets]\n            };\n            break;\n        }\n        case TODO_ACTIONS.DONE_TASK: {\n            const { buckets } = state;\n            const taskBucket = buckets[action.bucketIndex]\n\n            const item = taskBucket.items[action.taskIndex];\n            item.done = !item.done;\n\n            changes = {\n                buckets: [...buckets]\n            };\n            break;\n        }\n        default:\n            return state;\n    }\n\n    if (Object.keys(changes).length > 0) {\n        localStorage.setItem(LOCAL_STORAGE_BUCKET, JSON.stringify(changes || {}))\n        return changes;\n    }\n    else {\n        return state;\n    }\n};\n\nexport default TodoReducer;\n","import { createStore } from 'redux'\nimport TodoReducer from './reducer'\n\nconst store = createStore(TodoReducer)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoBucketApp from './TodoBucketApp';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store} >\n        <TodoBucketApp />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}