{"version":3,"sources":["actions.js","Components/TodoHeader.js","Components/InputForm.js","Components/Tasks.js","Components/TodoList.js","TodoBucketApp.js","serviceWorker.js","reducer.js","store.js","index.js"],"names":["TODO_ACTIONS","ADD_BUCKET","ADD_TASK","REMOVE_TASK","DONE_TASK","addBucket","name","type","addTask","value","bucketIndex","doneTask","taskIndex","removeTask","TodoHeader","heading","InputForm","onSubmit","event","preventDefault","newItemValue","refs","itemName","onValueChange","props","form","reset","this","focus","buttonText","ref","className","placeholder","React","Component","Tasks","items","markTodoDone","removeItem","itemsElement","map","item","i","todoClass","done","aria-hidden","onClick","TodoList","bucket","addItem","id","TodoBucketApp","bucketName","addBucketDispatch","addTaskDispatch","removeTaskDispatch","doneTaskDispatch","todoListElements","buckets","key","connect","state","Boolean","window","location","hostname","match","initialState","TodoReducer","action","task","taskBucket","push","splice","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15cf2659.chunk.js","sourcesContent":["export const TODO_ACTIONS = {\n    ADD_BUCKET: 'ADD_BUCKET',\n    ADD_TASK: 'ADD_TASK',\n    REMOVE_TASK: 'REMOVE_TASK',\n    DONE_TASK: 'DONE_TASK',\n}\n\nexport const addBucket = ({ name }) => ({\n    type: TODO_ACTIONS.ADD_BUCKET,\n    name,\n})\n\nexport const addTask = ({ value, bucketIndex }) => ({\n    type: TODO_ACTIONS.ADD_TASK,\n    value,\n    bucketIndex,\n})\n\nexport const doneTask = ({ taskIndex, bucketIndex }) => ({\n    type: TODO_ACTIONS.DONE_TASK,\n    taskIndex,\n    bucketIndex,\n})\n\nexport const removeTask = ({ taskIndex, bucketIndex }) => ({\n    type: TODO_ACTIONS.REMOVE_TASK,\n    taskIndex,\n    bucketIndex,\n})\n\nexport default {\n    TODO_ACTIONS,\n    addBucket,\n    addTask,\n    doneTask,\n    removeTask,\n}","import React from 'react';\n\nexport function TodoHeader({ heading }) {\n    return <h1>{heading}</h1>;\n}\n","import React from 'react';\n\nexport class InputForm extends React.Component {\n    componentDidMount() {\n        this.refs.itemName.focus();\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        var newItemValue = this.refs.itemName.value;\n\n        if (newItemValue) {\n            const { onValueChange } = this.props;\n            onValueChange(newItemValue);\n            this.refs.form.reset();\n        }\n    }\n    \n    render() {\n        const { buttonText } = this.props;\n\n        return (\n            <form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\n                <input type=\"text\" ref=\"itemName\" className=\"form-control\" placeholder=\"type...\" />\n                <button type=\"submit\" className=\"btn btn-default\">{buttonText}</button>\n            </form>\n        );\n    }\n}","import React from 'react';\n\nexport function Tasks({\n    items,\n    bucketIndex,\n    markTodoDone,\n    removeItem,\n}) {\n    const itemsElement = items.map((item, i) => {\n        var todoClass = item.done ?\n            \"done\" : \"undone\";\n\n        return (\n            <li className=\"list-group-item \">\n                <div className={todoClass}>\n                    <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={() => {\n                        markTodoDone(i, bucketIndex);\n                    }}></span>\n                    {item.value}\n                    <button type=\"button\" className=\"close\" onClick={() => {\n                        removeItem(i, bucketIndex);\n                    }}>&times;</button>\n                </div>\n            </li>\n        );\n    })\n\n    return (\n        <ul className=\"list-group\"> {itemsElement} </ul>\n    );\n}","import React from 'react';\nimport { TodoHeader } from './TodoHeader';\nimport { InputForm } from './InputForm';\nimport { Tasks } from './Tasks';\n\nexport function TodoList({\n    bucket,\n    addItem,\n    removeItem,\n    markTodoDone,\n    bucketIndex,\n}) {\n\n    return (<div id=\"main\">\n        <TodoHeader heading={bucket.name} />\n        <Tasks\n            items={bucket.items}\n            removeItem={removeItem}\n            markTodoDone={markTodoDone}\n            bucketIndex={bucketIndex}\n        />\n        <InputForm buttonText='Create Task' onValueChange={addItem} />\n    </div>)\n}","import { connect } from 'react-redux';\nimport {\n  addBucket,\n  addTask,\n  doneTask,\n  removeTask,\n} from './actions'\nimport React from 'react';\nimport { TodoList } from './Components/TodoList';\nimport { InputForm } from './Components/InputForm';\nimport './TodoBucketApp.css'\nexport class TodoBucketApp extends React.Component {\n  addBucket = (bucketName) => {\n    if (!bucketName) {\n      return;\n    }\n    this.props.addBucketDispatch({ name: bucketName })\n  }\n\n  addItem = (value, bucketIndex) => {\n    this.props.addTaskDispatch({ value, bucketIndex })\n  }\n\n  removeItem = (taskIndex, bucketIndex) => {\n    this.props.removeTaskDispatch({ taskIndex, bucketIndex })\n  }\n\n  markTodoDone = (taskIndex, bucketIndex) => {\n    this.props.doneTaskDispatch({ taskIndex, bucketIndex })\n  }\n\n  render() {\n    const { buckets } = this.props;\n\n    const todoListElements = buckets.map((bucket, i) => {\n      return <TodoList\n        key={bucket.name + i}\n        bucket={bucket}\n        addItem={(value) => {\n          this.addItem(value, i)\n        }}\n        removeItem={this.removeItem}\n        markTodoDone={this.markTodoDone}\n        bucketIndex={i}\n      />\n    });\n\n    return (\n      <div>\n        <div className=\"bucket-form\">\n          <InputForm buttonText='Create Bucket' onValueChange={this.addBucket} />\n        </div>\n\n        {todoListElements}\n      </div>\n    )\n  }\n}\n\n\nfunction mapStateToProps(state, props) {\n  const {\n    buckets\n  } = state;\n\n  return {\n    buckets\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addBucketDispatch: addBucket,\n  addTaskDispatch: addTask,\n  doneTaskDispatch: doneTask,\n  removeTaskDispatch: removeTask,\n})(TodoBucketApp);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TODO_ACTIONS } from './actions';\n\nconst initialState = {\n    buckets: []\n};\n\nconst TodoReducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case TODO_ACTIONS.ADD_BUCKET: {\n            const { buckets } = state;\n            return {\n                buckets: [{ name: action.name, items: [] }, ...buckets]\n            }\n        }\n        case TODO_ACTIONS.ADD_TASK: {\n            const { buckets } = state;\n            const task = {\n                done: false,\n                value: action.value,\n            }\n\n            const taskBucket = { ...buckets[action.bucketIndex] }\n            taskBucket.items.push(task);\n\n            buckets[action.bucketIndex] = taskBucket;\n\n            return {\n                buckets: [...buckets]\n            }\n\n        }\n        case TODO_ACTIONS.REMOVE_TASK: {\n            const { buckets } = state;\n            const taskBucket = buckets[action.bucketIndex]\n\n\n            taskBucket.items.splice(action.taskIndex, 1);\n            return {\n                buckets: [...buckets]\n            };\n        }\n        case TODO_ACTIONS.DONE_TASK: {\n            const { buckets } = state;\n            const taskBucket = buckets[action.bucketIndex]\n\n            const item = taskBucket.items[action.taskIndex];\n            item.done = !item.done;\n\n            return {\n                buckets: [...buckets]\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default TodoReducer;\n","import { createStore } from 'redux'\nimport TodoReducer from './reducer'\n\nconst store = createStore(TodoReducer)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoBucketApp from './TodoBucketApp';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store} >\n        <TodoBucketApp />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}